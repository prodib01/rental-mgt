@model List<RentalManagementSystem.DTOs.UtilityDto>

@{
    Layout = "_LandlordLayout";
}

<style>
    .utility-card {
        transition: all 0.3s ease;
        border-radius: 12px;
        background: white;
        min-width: 220px;
        max-width: 220px;
        margin: 8px;
        padding: 15px;
        position: relative;
        overflow: hidden;
        border: none;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        cursor: pointer;
    }

    .utility-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }

    .utility-card::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 3px;
        background: linear-gradient(45deg, #4e73df, #224abe);
    }

    .utility-cards-container {
        display: flex;
        overflow-x: auto;
        padding: 15px 10px;
        -ms-overflow-style: none;
        scrollbar-width: none;
        gap: 10px;
    }

    .utility-cards-container::-webkit-scrollbar {
        display: none;
    }

    .utility-icon {
        font-size: 1.5em;
        color: #4e73df;
        margin-bottom: 10px;
    }

    .utility-name {
        font-size: 1rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 5px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .utility-cost {
        font-size: 0.9rem;
        color: #6c757d;
        margin-bottom: 10px;
    }

    .utility-actions {
        position: absolute;
        right: -80px;
        top: 50%;
        transform: translateY(-50%);
        transition: all 0.3s ease;
        display: flex;
        flex-direction: column;
        gap: 6px;
    }

    .utility-card:hover .utility-actions {
        right: 15px;
    }

    .action-button {
        width: 28px;
        height: 28px;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 50%;
        border: none;
        transition: all 0.2s ease;
        font-size: 0.8rem;
    }

    .action-button:hover {
        transform: scale(1.1);
    }

    .action-button.edit {
        background: #ffeaa7;
        color: #fdcb6e;
    }

    .action-button.delete {
        background: #ffe2e2;
        color: #ff7675;
    }

    .dashboard-header {
        background: linear-gradient(45deg, #4e73df, #224abe);
        color: white;
        padding: 1.5rem;
        border-radius: 12px;
        margin-bottom: 1.5rem;
    }

    .table th {
        background: linear-gradient(45deg, #4e73df, #224abe);
        color: white !important;
        font-weight: 500;
    }

    .table-hover tbody tr:hover {
        background-color: #f8f9fa;
        transition: all 0.2s ease;
    }

    .modal-content {
        border-radius: 12px;
    }
</style>

<div class="container-fluid py-4">
    <div class="dashboard-header mb-3">
        <div class="d-flex justify-content-between align-items-center">
            <h2 class="mb-0 h4">
                <i class="fas fa-bolt mr-2"></i>Utility Management
            </h2>
            <button class="btn btn-light rounded-pill shadow-sm btn-sm" data-toggle="modal"
                data-target="#add-utility-modal">
                <i class="fas fa-plus-circle mr-2"></i>Add New Utility
            </button>
        </div>
    </div>

    <div class="utility-cards-container">
        @foreach (var utility in Model)
        {
            <div class="utility-card" onclick="loadReadings(@utility.Id)">
                <div class="utility-icon">
                    <i class="fas fa-bolt"></i>
                </div>
                <div class="utility-name">@utility.Name</div>
                <div class="utility-cost">@utility.Cost.ToString("C") per unit</div>
                <div class="utility-actions">
                    <button class="action-button edit" data-toggle="modal" data-target="#edit-utility-modal-@utility.Id">
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="action-button delete" data-toggle="modal"
                        data-target="#delete-utility-modal-@utility.Id">
                        <i class="fas fa-trash"></i>
                    </button>
                </div>
            </div>
        }
    </div>

    <div id="readingsSection" style="display: none;" class="mt-5">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h4 class="text-primary mb-0">Utility Readings</h4>
            <button class="btn btn-success rounded-pill shadow-sm" data-toggle="modal" data-target="#add-reading-modal">
                <i class="fas fa-plus-circle mr-2"></i>Add New Reading
            </button>
        </div>
        <div class="table-responsive">
            <table class="table table-hover">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Tenant</th>
                        <th>House Number</th>
                        <th>Previous Reading</th>
                        <th>Current Reading</th>
                        <th>Consumption</th>
                        <th>Total Cost</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="readingsTableBody">
                </tbody>
            </table>
        </div>
    </div>

    <!-- Modal for adding a new utility -->
    <div class="modal fade" id="add-utility-modal" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content border-0 shadow-lg">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title font-weight-bold">
                        <i class="fas fa-plus-circle mr-2"></i>Add New Utility
                    </h5>
                </div>
                <div class="modal-body">
                    <form asp-action="Add" method="post">
                        @Html.AntiForgeryToken()
                        <div class="row">
                            <div class="col-md-6 form-group">
                                <label class="font-weight-bold">Name</label>
                                <input type="text" name="Name" class="form-control" required>
                            </div>
                            <div class="col-md-6 form-group">
                                <label class="font-weight-bold">Cost per Unit</label>
                                <input type="number" name="Cost" class="form-control" required>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                            <button type="submit" class="btn btn-primary">Add Utility</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal for adding a new reading -->
    <div class="modal fade" id="add-reading-modal" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content border-0 shadow-lg">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title font-weight-bold">
                        <i class="fas fa-plus-circle mr-2"></i>Add New Reading
                    </h5>
                </div>
                <div class="modal-body">
                    <form id="readingForm">
                        <input type="hidden" id="currentUtilityId" name="UtilityId">
                        <div class="row">
                            <div class="col-md-6 form-group">
                                <label class="font-weight-bold">Tenant</label>
                                <select name="TenantId" class="form-control" required>
                                    @foreach (var tenant in ViewBag.Tenants)
                                    {
                                        <option value="@tenant.Value">@tenant.Text</option>
                                    }
                                </select>
                            </div>
                            <div class="col-md-6 form-group">
                                <label class="font-weight-bold">Previous Reading</label>
                                <input type="number" name="PrevReading" class="form-control" required>
                            </div>
                            <div class="col-md-6 form-group">
                                <label class="font-weight-bold">Current Reading</label>
                                <input type="number" name="CurrentReading" class="form-control" required>
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-primary" onclick="saveReading()">Add Reading</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit and Delete modals for each utility -->
    @foreach (var utility in Model)
    {
        <div class="modal fade" id="edit-utility-modal-@utility.Id" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content border-0 shadow-lg">
                    <div class="modal-header bg-warning">
                        <h5 class="modal-title font-weight-bold">
                            <i class="fas fa-edit mr-2"></i>Edit Utility
                        </h5>
                    </div>
                    <div class="modal-body">
                        <form asp-action="Edit" asp-route-id="@utility.Id" method="post">
                            @Html.AntiForgeryToken()
                            <div class="row">
                                <div class="col-md-6 form-group">
                                    <label class="font-weight-bold">Name</label>
                                    <input type="text" name="Name" value="@utility.Name" class="form-control" required>
                                </div>
                                <div class="col-md-6 form-group">
                                    <label class="font-weight-bold">Cost per Unit</label>
                                    <input type="number" name="Cost" value="@utility.Cost" class="form-control" required>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                                <button type="submit" class="btn btn-warning">Update Utility</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <!-- Edit Reading Modal -->
        <div class="modal fade" id="edit-reading-modal" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content border-0 shadow-lg">
                    <div class="modal-header bg-warning">
                        <h5 class="modal-title font-weight-bold">
                            <i class="fas fa-edit mr-2"></i>Edit Reading
                        </h5>
                    </div>
                    <div class="modal-body">
                        <form id="editReadingForm">
                            <input type="hidden" id="editReadingId" name="readingId">
                            <div class="row">
                                <div class="col-md-6 form-group">
                                    <label class="font-weight-bold">Previous Reading</label>
                                    <input type="number" name="PrevReading" id="editPrevReading" class="form-control"
                                        required>
                                </div>
                                <div class="col-md-6 form-group">
                                    <label class="font-weight-bold">Current Reading</label>
                                    <input type="number" name="CurrentReading" id="editCurrentReading" class="form-control"
                                        required>
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-warning" onclick="updateReading()">Update
                                    Reading</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="delete-utility-modal-@utility.Id" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content border-0 shadow-lg">
                    <div class="modal-header bg-danger text-white">
                        <h5 class="modal-title font-weight-bold">
                            <i class="fas fa-trash mr-2"></i>Delete Utility
                        </h5>
                    </div>
                    <div class="modal-body text-center py-4">
                        <p class="lead mb-4 text-muted">
                            Are you sure you want to delete @utility.Name?
                        </p>
                        <form asp-action="Delete" asp-route-id="@utility.Id" method="post">
                            @Html.AntiForgeryToken()
                            <button type="button" class="btn btn-secondary mr-2" data-dismiss="modal">Cancel</button>
                            <button type="submit" class="btn btn-danger">Delete Utility</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">

    <script>
        let currentUtilityId = null;

        function loadReadings(utilityId) {
            currentUtilityId = utilityId;
            document.getElementById('currentUtilityId').value = utilityId;

            fetch(`/Landlord/Utility/Readings/${utilityId}`)
                .then(response => response.json())
                .then(data => {
                    console.log('Loaded readings:', data);  // Debug log
                    const tbody = document.getElementById('readingsTableBody');
                    tbody.innerHTML = '';

                    data.forEach(reading => {
                        tbody.innerHTML += `
                            <tr data-reading-id="${reading.id}">  <!-- Add this data attribute -->
                                <td>${new Date(reading.readingDate).toLocaleDateString()}</td>
                                <td>${reading.tenantName}</td>
                                <td>${reading.houseNumber}</td>
                                <td>${reading.prevReading}</td>
                                <td>${reading.currentReading}</td>
                                <td>${reading.consumption}</td>
                                <td>${reading.totalCost.toLocaleString('en-US', {
                            style: 'currency',
                            currency: 'USD'
                        })}</td>
                                <td>
                                    <div class="btn-group">
                                        <button class="btn btn-sm btn-warning" onclick="editReading(${reading.id}, ${reading.prevReading}, ${reading.currentReading})"
                                                style="margin-right: 5px;">
                                            <i class="fas fa-edit"></i>
                                        </button>
                                        <button class="btn btn-sm btn-danger" onclick="deleteReading(${reading.id})">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        `;
                    });

                    document.getElementById('readingsSection').style.display = 'block';
                })
                .catch(error => {
                    console.error('Error loading readings:', error);
                    alert('Error loading readings');
                });
        }

        function saveReading() {
            const form = document.getElementById('readingForm');
            const formData = new FormData(form);
            const utilityId = currentUtilityId;

            const data = {
                tenantId: parseInt(formData.get('TenantId')),
                prevReading: parseInt(formData.get('PrevReading')),
                currentReading: parseInt(formData.get('CurrentReading'))
            };

            fetch(`/Landlord/Utility/Reading/Add/${utilityId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(data)
            })
                .then(async response => {
                    if (!response.ok) {
                        const errorText = await response.text();
                        if (response.status === 400) {
                            alert(errorText);
                        } else {
                            throw new Error('Error saving reading');
                        }
                        return;
                    }
                    $('#add-reading-modal').modal('hide');
                    loadReadings(utilityId);
                    form.reset();
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert(error.message);
                });
        }

        function editReading(readingId, prevReading, currentReading) {
            document.getElementById('editReadingId').value = readingId;
            document.getElementById('editPrevReading').value = prevReading;
            document.getElementById('editCurrentReading').value = currentReading;
            $('#edit-reading-modal').modal('show');
        }

        function updateReading() {
            const readingId = document.getElementById('editReadingId').value;
            const prevReading = parseInt(document.getElementById('editPrevReading').value);
            const currentReading = parseInt(document.getElementById('editCurrentReading').value);

            if (currentReading <= prevReading) {
                alert('Current reading must be greater than previous reading');
                return;
            }

            const data = {
                prevReading: prevReading,
                currentReading: currentReading,
                utilityId: currentUtilityId,  // Add this line
                tenantId: document.querySelector('select[name="TenantId"]').value  // Add this line
            };

            console.log('Updating reading with data:', data);  // Debug log

            fetch(`/Landlord/Utility/Reading/Edit/${readingId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify(data)
            })
                .then(async response => {
                    if (!response.ok) {
                        const errorText = await response.text();
                        throw new Error(`Server returned ${response.status}: ${errorText}`);
                    }
                    return response;
                })
                .then(() => {
                    $('#edit-reading-modal').modal('hide');
                    loadReadings(currentUtilityId);
                })
                .catch(error => {
                    console.error('Error details:', error);
                    alert(`Error updating reading: ${error.message}`);
                });
        }

        function deleteReading(readingId) {
            if (!confirm('Are you sure you want to delete this reading?')) {
                return;
            }

            console.log('Deleting reading:', readingId);  // Debug log

            fetch(`/Landlord/Utility/Reading/Delete/${readingId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            })
                .then(async response => {
                    if (!response.ok) {
                        const errorText = await response.text();
                        throw new Error(`Server returned ${response.status}: ${errorText}`);
                    }
                    return response;
                })
                .then(() => {
                    loadReadings(currentUtilityId);
                })
                .catch(error => {
                    console.error('Error details:', error);
                    alert(`Error deleting reading: ${error.message}`);
                });
        }

        // Form validation
        document.addEventListener('DOMContentLoaded', function () {
            const readingForm = document.getElementById('readingForm');
            readingForm.addEventListener('submit', function (e) {
                const currentReading = parseInt(this.querySelector('[name="CurrentReading"]').value);
                const prevReading = parseInt(this.querySelector('[name="PrevReading"]').value);

                if (currentReading <= prevReading) {
                    e.preventDefault();
                    alert('Current reading must be greater than previous reading');
                    return false;
                }
            });

            // Auto-populate previous reading when selecting tenant
            const tenantSelect = document.querySelector('[name="TenantId"]');
            tenantSelect.addEventListener('change', function () {
                if (currentUtilityId && this.value) {
                    fetch(`/Landlord/Utility/LastReading/${currentUtilityId}/${this.value}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data && data.currentReading) {
                                document.querySelector('[name="PrevReading"]').value = data.currentReading;
                            } else {
                                document.querySelector('[name="PrevReading"]').value = '';
                            }
                        });
                }
            });
        });
    </script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js"></script>
}
