@model RentalManagementSystem.ViewModels.PaymentViewModel

@{
    Layout = "_TenantLayout";
    ViewData["Title"] = "Payments";
}

<style>
    .payment-card {
        border: none;
        border-radius: 1rem;
        box-shadow: 0 2px 12px rgba(0, 0, 0, 0.05);
        background-color: white;
    }

    .payment-header {
        background: linear-gradient(135deg, #4338ca 0%, #3730a3 100%);
        border-radius: 1rem 1rem 0 0;
        padding: 1.5rem;
    }

    .payment-table th {
        font-weight: 600;
        color: #4b5563;
        background-color: #f9fafb;
        padding: 1rem;
    }

    .payment-table td {
        padding: 1rem;
        vertical-align: middle;
    }

    .payment-badge {
        padding: 0.5rem 1rem;
        border-radius: 0.5rem;
        font-weight: 500;
    }

    .status-badge-completed {
        background-color: #dcfce7;
        color: #166534;
    }

    .status-badge-pending {
        background-color: #fef3c7;
        color: #92400e;
    }

    .method-badge {
        background-color: #e0e7ff;
        color: #3730a3;
    }

    .modal-content {
        border: none;
        border-radius: 1rem;
        overflow: hidden;
    }

    .modal-header {
        background: linear-gradient(135deg, #4338ca 0%, #3730a3 100%);
        border-radius: 1rem 1rem 0 0;
        padding: 1.5rem;
    }

    .form-control,
    .form-select {
        border-radius: 0.5rem;
        padding: 0.75rem 1rem;
        border: 1px solid #e5e7eb;
    }

    .form-control:focus,
    .form-select:focus {
        border-color: #4338ca;
        box-shadow: 0 0 0 0.2rem rgba(67, 56, 202, 0.25);
    }

    .input-group-text {
        border-radius: 0.5rem 0 0 0.5rem;
        border: 1px solid #e5e7eb;
        background-color: #f9fafb;
    }

    .btn-add-payment {
        background-color: #ffffff;
        color: #4338ca;
        border-radius: 0.5rem;
        padding: 0.75rem 1.5rem;
        font-weight: 500;
        transition: all 0.2s;
    }

    .btn-add-payment:hover {
        background-color: #f9fafb;
        transform: translateY(-2px);
    }

    .modal-submit-btn {
        background-color: #4338ca;
        color: white;
        border-radius: 0.5rem;
        padding: 0.75rem 1.5rem;
        font-weight: 500;
        transition: all 0.2s;
    }

    .modal-submit-btn:hover {
        background-color: #3730a3;
    }

    .alert {
        border-radius: 0.5rem;
    }
</style>

<div class="container py-4">
    <div class="payment-card">
        <div class="payment-header d-flex justify-content-between align-items-center">
            <h2 class="text-white mb-0 fw-bold">Payments</h2>
            <button class="btn btn-add-payment" data-bs-toggle="modal" data-bs-target="#addPaymentModal">
                <i class="fas fa-plus me-2"></i>Add Payment
            </button>
        </div>
        <div class="card-body p-4">
            @if (TempData["SuccessMessage"] != null)
            {
            <div class="alert alert-success alert-dismissible fade show mb-4" role="alert">
                <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
            }

            @if (TempData["ErrorMessage"] != null)
            {
            <div class="alert alert-danger alert-dismissible fade show mb-4" role="alert">
                <i class="fas fa-exclamation-circle me-2"></i>@TempData["ErrorMessage"]
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
            }
            @if (Model.Payments?.Any() == true)
            {
                <div class="table-responsive">
                    <table class="table table-hover payment-table">
                        <thead>
                            <tr>
                                <th>Payment Type</th>
                                <th>Amount</th>
                                <th>Payment Date</th>
                                <th>Method</th>
                                <th>Status</th>
                                <th>Reference</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var payment in Model.Payments)
                            {
                                <tr>
                                    <td>
                                        <strong>@payment.PaymentType</strong>
                                    </td>
                                    <td>
                                        <strong>$@payment.Amount.ToString("N2")</strong>
                                    </td>
                                    <td>@payment.PaymentDate.ToShortDateString()</td>
                                    <td>
                                        <span class="payment-badge method-badge">@payment.PaymentMethod</span>
                                    </td>
                                    <td>
                                        <span
                                            class="payment-badge @(payment.PaymentStatus == "Completed" ? "status-badge-completed" : "status-badge-pending")">
                                            @payment.PaymentStatus
                                        </span>
                                    </td>
                                    <td>
                                        <small class="text-muted">@payment.PaymentReference</small>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    <i class="fas fa-info-circle me-2"></i>No payments found.
                </div>
            }
        </div>
    </div>

    <!-- Previous code remains the same until the modal part -->

    <!-- Add Payment Modal -->
    <div class="modal fade" id="addPaymentModal" tabindex="-1" aria-labelledby="addPaymentModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title text-white fw-bold" id="addPaymentModalLabel">Add Payment</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"
                        aria-label="Close"></button>
                </div>
                <div class="modal-body p-4">
                    <form asp-action="Add" method="post" class="needs-validation" novalidate>
                        <input type="hidden" name="HouseId" value="@Model.HouseId" />
                        <input type="hidden" name="UserId" value="@Model.UserId" />

                        @{
                        var house = Model.Houses.FirstOrDefault(h => h.Value == Model.HouseId.ToString());
                        var houseNumber = house?.Text ?? "No house assigned";
                        }

                        <div class="mb-3">
                            <label for="PaymentType" class="form-label">Payment Type</label>
                            <select class="form-select" id="PaymentType" name="PaymentType" required>
                                <option value="">Select payment type</option>
                                <option value="Rent">Rent</option>
                                <option value="Utility">Utility</option>
                            </select>
                            <div class="invalid-feedback">Please select a payment type.</div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">House Number</label>
                            <input type="text" class="form-control bg-light" value="@houseNumber" readonly />
                        </div>

                        <div id="utilityBreakdown" class="mb-3 d-none">
                            <label class="form-label">Utility Breakdown</label>
                            <div class="mt-3 mb-3">
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="Amount" class="form-label">Amount</label>
                            <div class="input-group">
                                <span class="input-group-text">$</span>
                                <input type="number" class="form-control" id="Amount" name="Amount" required step="0.01" min="0">
                                <div class="invalid-feedback">Please enter a valid amount.</div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label for="PaymentDate" class="form-label">Payment Date</label>
                            <input type="date" class="form-control" id="PaymentDate" name="PaymentDate" required>
                            <div class="invalid-feedback">Please select a date.</div>
                        </div>

                        <div class="mb-3">
                            <label for="PaymentMethod" class="form-label">Payment Method</label>
                            <select class="form-select" id="PaymentMethod" name="PaymentMethod" required>
                                <option value="">Select payment method</option>
                                <option value="Cash">Cash</option>
                                <option value="BankTransfer">Bank Transfer</option>
                                <option value="MobileMoney">Mobile Money</option>
                            </select>
                            <div class="invalid-feedback">Please select a payment method.</div>
                        </div>

                        <div class="mb-3">
                            <label for="PaymentStatus" class="form-label">Payment Status</label>
                            <select class="form-select" id="PaymentStatus" name="PaymentStatus" required>
                                <option value="">Select status</option>
                                <option value="Pending">Pending</option>
                                <option value="Completed">Completed</option>
                            </select>
                            <div class="invalid-feedback">Please select a status.</div>
                        </div>

                        <div class="mb-3">
                            <label for="Description" class="form-label">Description (Optional)</label>
                            <textarea class="form-control" id="Description" name="Description" rows="3"
                                      placeholder="Enter any additional notes or description"></textarea>
                        </div>

                        <div class="alert alert-info mb-4">
                            <i class="fas fa-info-circle me-2"></i>
                            Payment reference will be automatically generated.
                        </div>

                        <div class="d-flex justify-content-end gap-2">
                            <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                            <button type="submit" class="btn modal-submit-btn">Submit Payment</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Form validation
    (function () {
        'use strict'
        var forms = document.querySelectorAll('.needs-validation')
        Array.prototype.slice.call(forms).forEach(function (form) {
            form.addEventListener('submit', function (event) {
                if (!form.checkValidity()) {
                    event.preventDefault()
                    event.stopPropagation()
                }
                form.classList.add('was-validated')
            }, false)
        })
    })()

    document.addEventListener('DOMContentLoaded', function () {
        // Set default date to today
        const today = new Date().toISOString().split('T')[0];
        document.getElementById('PaymentDate').value = today;

        const paymentTypeSelect = document.getElementById('PaymentType');
        const amountInput = document.getElementById('Amount');
        const utilityBreakdownDiv = document.getElementById('utilityBreakdown');
        const houseIdInput = document.querySelector('input[name="HouseId"]');
        const paymentForm = document.querySelector('form[asp-action="Add"]');

        async function checkPaymentAvailability(paymentType) {
            try {
                const response = await fetch(`/Tenant/Payments/CheckPaymentAvailability?paymentType=${paymentType}`);
                const data = await response.json();
                return data;
            } catch (error) {
                console.error('Error checking payment availability:', error);
                return { available: false, message: 'Error checking payment availability' };
            }
        }

        async function updateAmount() {
            const selectedType = paymentTypeSelect.value;

            if (!selectedType) {
                amountInput.value = '';
                utilityBreakdownDiv.classList.add('d-none');
                return;
            }

            // First check if payment is available for this month
            const availabilityCheck = await checkPaymentAvailability(selectedType);
            if (!availabilityCheck.available) {
                // Show alert message
                const alertDiv = document.createElement('div');
                alertDiv.className = 'alert alert-warning alert-dismissible fade show';
                alertDiv.innerHTML = `
                <strong>Notice:</strong> ${availabilityCheck.message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;

                // Insert alert before the form
                paymentForm.parentNode.insertBefore(alertDiv, paymentForm);

                // Reset the selection
                paymentTypeSelect.value = '';
                amountInput.value = '';
                utilityBreakdownDiv.classList.add('d-none');
                return;
            }

            if (selectedType === 'Rent') {
                try {
                    const houseId = houseIdInput.value;
                    const response = await fetch(`/Tenant/Payments/GetHouseRent/${houseId}`);
                    const data = await response.json();
                    amountInput.value = data.rent.toFixed(2);
                    utilityBreakdownDiv.classList.add('d-none');
                } catch (error) {
                    console.error('Error fetching rent amount:', error);
                }
            } else if (selectedType === 'Utility') {
                try {
                    const response = await fetch('/Tenant/Payments/GetUnpaidUtilities');
                    const utilities = await response.json();

                    if (utilities.length === 0) {
                        amountInput.value = '0.00';
                        utilityBreakdownDiv.innerHTML = '<div class="alert alert-info">No unpaid utilities found.</div>';
                    } else {
                        let total = 0;
                        let breakdownHtml = '<div class="list-group">';

                        utilities.forEach(utility => {
                            total += utility.totalCost;
                            breakdownHtml += `
                            <div class="list-group-item d-flex justify-content-between align-items-center">
                                <span>${utility.name}</span>
                                <span class="badge bg-primary rounded-pill">$${utility.totalCost.toFixed(2)}</span>
                            </div>`;
                        });

                        breakdownHtml += '</div>';
                        utilityBreakdownDiv.innerHTML = breakdownHtml;
                        amountInput.value = total.toFixed(2);
                    }
                    utilityBreakdownDiv.classList.remove('d-none');
                } catch (error) {
                    console.error('Error fetching utility amounts:', error);
                }
            }
        }

        // Add form submission handler
        if (paymentForm) {
            paymentForm.addEventListener('submit', function(event) {
                if (!paymentTypeSelect.value) {
                    event.preventDefault();
                    alert('Please select a payment type');
                    return false;
                }

                if (!amountInput.value || parseFloat(amountInput.value) <= 0) {
                    event.preventDefault();
                    alert('Invalid amount. Please select a valid payment type.');
                    return false;
                }

                // Make amount field not readonly just before submission
                // This is necessary because readonly fields don't get submitted with the form
                amountInput.readOnly = false;
            });
        }

        if (paymentTypeSelect) {
            paymentTypeSelect.addEventListener('change', updateAmount);
        }
    });
</script>